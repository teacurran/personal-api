<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>personal-api-bom</artifactId>
		<groupId>com.wirelust.personal-api</groupId>
		<version>1.0-SNAPSHOT</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<artifactId>personal-api</artifactId>
	<packaging>war</packaging>

	<properties>
		<webapp.dir>${project.build.directory}/${project.build.finalName}-exploded.war</webapp.dir>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.wirelust.personal-api.clients</groupId>
			<artifactId>fitbit</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!--                       -->
		<!-- PROVIDED              -->
		<!--                       -->
		<dependency>
			<groupId>org.jboss.spec</groupId>
			<artifactId>jboss-javaee-7.0</artifactId>
			<scope>provided</scope>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-cdi</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson2-provider</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-multipart-provider</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-validator-provider-11</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${version.hibernate}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${version.hibernate}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>${version.hibernate}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Compile -->
		<!-- DeltaSpike -->
		<dependency>
			<groupId>org.apache.deltaspike.core</groupId>
			<artifactId>deltaspike-core-api</artifactId>
			<version>${version.deltaspike}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.core</groupId>
			<artifactId>deltaspike-core-impl</artifactId>
			<version>${version.deltaspike}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-jpa-module-api</artifactId>
			<version>${version.deltaspike}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-jpa-module-impl</artifactId>
			<version>${version.deltaspike}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-jsf-module-api</artifactId>
			<version>${version.deltaspike}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-jsf-module-impl</artifactId>
			<version>${version.deltaspike}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-data-module-api</artifactId>
			<version>${version.deltaspike}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-data-module-impl</artifactId>
			<version>${version.deltaspike}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-security-module-api</artifactId>
			<version>${version.deltaspike}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-security-module-impl</artifactId>
			<version>${version.deltaspike}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.8.3</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>net.java.dev.inflector</groupId>
			<artifactId>inflector</artifactId>
			<version>0.7.0</version>
			<scope>compile</scope>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${version.junit}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian</groupId>
			<artifactId>arquillian-bom</artifactId>
			<version>${version.arquillian}</version>
			<scope>test</scope>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<scope>test</scope>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>org.wildfly</groupId>
			<artifactId>wildfly-embedded</artifactId>
			<version>${version.wildfly}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>

		<plugins>
			<plugin>
				<groupId>pl.allegro</groupId>
				<artifactId>grunt-maven-plugin</artifactId>
				<version>1.5.0</version>
				<configuration>
					<!-- relative to src/main/webapp/, default: static -->
					<jsSourceDirectory>scripts</jsSourceDirectory>

					<gruntBuildDirectory>target/grunt-build</gruntBuildDirectory>

					<!-- example options usage to get verbose output in logs -->
					<gruntOptions>
						<gruntOption>--verbose</gruntOption>
					</gruntOptions>

					<!-- example npm install env variable -->
					<npmEnvironmentVar>
						<PHANTOMJS_CDNURL>http://cnpmjs.org/downloads</PHANTOMJS_CDNURL>
					</npmEnvironmentVar>

					<!-- example options usage to filter variables in given resource -->
					<filteredResources>
						<filteredResource>maven-properties.json</filteredResource>
					</filteredResources>

				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>create-resources</goal>
							<goal>npm</goal>
							<!-- or npm-offline if npm failure is not an option -->
							<goal>bower</goal>
							<goal>grunt</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.2</version>
				<executions>
					<execution>
						<phase>generate-resources</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<timestampFormat>yyyyMMddHHmmssSSS</timestampFormat>
					<timestampPropertyName>releaseTimestamp</timestampPropertyName>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<compilerArguments>
						<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
					</compilerArguments>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<artifactId>maven-war-plugin</artifactId>

					<failOnMissingWebXml>false</failOnMissingWebXml>

					<archive>
						<!-- Note, manifest not written to exploded directory.
						http://jira.codehaus.org/browse/MWAR-167
						-->
						<manifestEntries>
							<Specification-Title>${project.name}</Specification-Title>
							<Specification-Version>${project.version}</Specification-Version>
							<Implementation-Version>${build.number}</Implementation-Version>
							<Implementation-Build>${buildNumber}</Implementation-Build>
						</manifestEntries>
					</archive>
					<!--<warSourceExcludes>css/*,js/*,js/components/**/*</warSourceExcludes> -->
					<!-- We're only handling CSS files now via the wro4j plugin, makes JS debugging easier.-->
					<!--<warSourceExcludes>css/*</warSourceExcludes> -->
					<webappDirectory>${webapp.dir}</webappDirectory>
					<webResources>
						<resource>
							<directory>src/main/webapp</directory>
							<filtering>false</filtering>
							<excludes>
								<exclude>**/*.scss</exclude>
								<exclude>**/*.html</exclude>
							</excludes>
						</resource>
						<resource>
							<directory>src/main/webapp</directory>
							<filtering>true</filtering>
							<includes>
								<include>**/*.html</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.wildfly</groupId>
					<artifactId>wildfly-arquillian-container-embedded</artifactId>
					<version>${version.wildfly}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<filtering>false</filtering>
						<excludes>
							<exclude>**/version.properties</exclude>
						</excludes>
					</resource>
					<resource>
						<directory>src/main/resources</directory>
						<filtering>true</filtering>
						<includes>
							<include>**/version.properties</include>
						</includes>
					</resource>
				</resources>
				<testResources>
					<testResource>
						<directory>src/test/resources</directory>
					</testResource>
					<testResource>
						<directory>src/test/resources-wildfly</directory>
					</testResource>
				</testResources>
				<plugins>

					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<configuration>

							<failOnMissingWebXml>false</failOnMissingWebXml>

							<archive>
								<!-- Note, manifest not written to exploded directory.
								http://jira.codehaus.org/browse/MWAR-167
								-->
								<manifestEntries>
									<Specification-Title>${project.name}</Specification-Title>
									<Specification-Version>${project.version}</Specification-Version>
									<Implementation-Version>${build.number}</Implementation-Version>
									<Implementation-Build>${buildNumber}</Implementation-Build>
								</manifestEntries>
							</archive>
							<webappDirectory>${webapp.dir}</webappDirectory>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.17</version>
						<configuration>
							<!-- Fork every test because it will launch a separate AS instance -->
							<forkMode>always</forkMode>
							<systemPropertyVariables>
								<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
								<!-- the maven dependency plugin will have already downloaded the server on /target -->
								<jboss.home>${project.basedir}/../../target/wildfly-${version.wildfly}</jboss.home>
								<module.path>${project.basedir}/../../target/wildfly-${version.wildfly}/modules
								</module.path>
								<!-- Do not use ./test/resources-wildfly/configuration because jboss will write to the
								config directory and we don't want these files to change -->
								<jboss.server.config.dir>${project.basedir}/target/test-classes/configuration</jboss.server.config.dir>
								<org.apache.deltaspike.ProjectStage>UnitTest</org.apache.deltaspike.ProjectStage>
							</systemPropertyVariables>
							<redirectTestOutputToFile>false</redirectTestOutputToFile>

						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<version>2.8</version>
						<executions>
							<execution>
								<id>unpack</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.wildfly</groupId>
											<artifactId>wildfly-dist</artifactId>
											<version>${version.wildfly}</version>
											<type>zip</type>
											<overWrite>false</overWrite>
											<outputDirectory>../../target</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>hibernate</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<dependencies>
				<dependency>
					<groupId>mysql</groupId>
					<artifactId>mysql-connector-java</artifactId>
					<version>${version.mysql.connector}</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.hibernate</groupId>
					<artifactId>hibernate-entitymanager</artifactId>
					<version>${version.hibernate.tools.hibernate}</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.hibernate</groupId>
					<artifactId>hibernate-core</artifactId>
					<version>${version.hibernate.tools.hibernate}</version>
					<scope>test</scope>
				</dependency>
				<!--
				<dependency>
					<groupId>org.hibernate</groupId>
					<artifactId>hibernate-infinispan</artifactId>
					<version>${version.hibernate.tools.hibernate}</version>
					<scope>test</scope>
				</dependency>
				-->
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-jpa-hibernate4</artifactId>
					<version>7.1.1.Final</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.hibernate</groupId>
					<artifactId>hibernate-tools</artifactId>
					<version>${version.hibernate.tools}</version>
					<scope>test</scope>
					<exclusions>
						<exclusion>
							<groupId>commons-logging</groupId>
							<artifactId>commons-logging</artifactId>
						</exclusion>
					</exclusions>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<overwrite>true</overwrite>
									<outputDirectory>${basedir}/target/classes</outputDirectory>

									<resources>
										<resource>
											<directory>src/main/resources/default</directory>
											<filtering>false</filtering>
											<excludes>
												<exclude>META-INF/*</exclude>
											</excludes>
										</resource>
										<resource>
											<directory>src/main/resources-development</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<!-- Hibernatetool will generate everything before running tests -->
								<phase>compile</phase>
								<configuration>
									<target>
										<!--
											For an introduction to the <hibernatetool> Ant Task see
											http://docs.jboss.org/tools/4.1.0.Final/en/hibernatetools/html_single/index.html#ant
										-->
										<echo message="Ant target, through maven-antrun-plugin, started"/>

										<property name="maven_compile_classpath" refid="maven.compile.classpath"/>
										<property name="maven_test_classpath" refid="maven.test.classpath"/>
										<property name="maven_runtime_classpath" refid="maven.runtime.classpath"/>
										<path id="hibernatetool.path">
											<!--
												Despite what states the documentation about
												referencing the Maven classpaths at
												http://maven.apache.org/plugins/maven-antrun-plugin/examples/classpaths.html
												writing:
													<pathelement path="maven.test.classpath" />
												does not work for this project. So I have set ant
												properties that refer to appropriate Maven
												classpathes.
											-->
											<pathelement path="${maven_compile_classpath}"/>
											<pathelement path="${maven_test_classpath}"/>
											<pathelement path="${maven_runtime_classpath}"/>
										</path>

										<!-- Doesn't do anything, just for outputting classpaths -->
										<path id="hibernatetool.path.compile">
											<pathelement path="${maven_compile_classpath}"/>
										</path>
										<property name="hibernatetool.classpath.compile" refid="hibernatetool.path.compile"/>
										<echo message="maven.compile.classpath : ${hibernatetool.classpath.compile}"/>

										<path id="hibernatetool.path.test">
											<pathelement path="${maven_test_classpath}"/>
										</path>
										<property name="hibernatetool.classpath.test" refid="hibernatetool.path.test"/>
										<echo message="maven.test.classpath : ${hibernatetool.classpath.test}"/>

										<path id="hibernatetool.path.runtime">
											<pathelement path="${maven_runtime_classpath}"/>
										</path>
										<property name="hibernatetool.classpath.runtime" refid="hibernatetool.path.runtime"/>
										<echo message="maven.runtime.classpath : ${hibernatetool.classpath.runtime}"/>

										<!--
											As described in "Using tasks not included in Ant's default jar" at
											http://maven.apache.org/plugins/maven-antrun-plugin/examples/customTasks.html
											I should have:
												* used classpathref="maven.plugin.classpath"
												* written all hibernatetool dependencies
											but because there are too many dependencies to write, as shown at
											http://mvnrepository.com/artifact/org.hibernate/hibernate-tools/4.0.0-CR1,
											I have preferred to leverage on Maven dependency management.

											So I have declared hibernate-tools artifact as one of my project
											dependency leaving Maven finding out the transitive dependencies.
											But because dependencies on maven.plugin.classpath are not packaged
											in the jar I have explicity excluded hibernate-tools, and its
											dependencies, from my project packaging declaring them in the
											"test" scope.
											Thus hibernate-tools dependencies were both on the
											maven.compile.classpath and the maven.test.classpath, so I have
											defined a "hibernatetool.path" that groups the compile and the
											test classpath.
										-->
										<taskdef name="hibernatetool"
												 classname="org.hibernate.tool.ant.HibernateToolTask"
												 classpathref="hibernatetool.path"/>

										<property name="generatedByHibernate.outputDirectory"
												  value="${project.build.directory}/generated/hibernate"/>
										<mkdir dir="${generatedByHibernate.outputDirectory}"/>

										<!--
										<copy todir="${generatedByHibernate.outputDirectory}/classpath">
											<fileset dir="${project.build.directory}/classes"/>
										</copy>
										<copy todir="${generatedByHibernate.outputDirectory}/classpath"
											  overwrite="true">
											<fileset dir="${project.basedir}/src/main/resources/development"/>
										</copy>
										-->

										<!--
										<copy todir="${project.build.directory}/classes"
											  overwrite="true">
											<fileset dir="${project.basedir}/src/main/resources/development"/>
										</copy>
										-->

										<hibernatetool destdir="${generatedByHibernate.outputDirectory}">
											<classpath>
												<path location="${project.build.directory}/classes"/>
											</classpath>

											<jpaconfiguration persistenceunit="personalapi"
															  propertyfile="${project.basedir}/src/main/resources-development/database.properties"/>

											<hbm2ddl create="true" export="false" drop="true" outputfilename="drop-create-ddl.sql"
													 format="true" console="true"/>

											<hbm2ddl create="true" export="false" drop="false" outputfilename="create-ddl.sql" format="true"
													 console="true"/>

											<hbm2ddl update="true" export="false" outputfilename="update-ddl.sql" format="true"
													 console="true"/>

										</hibernatetool>

										<echo message="Ant target, through maven-antrun-plugin, terminated"/>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

	</profiles>
</project>
